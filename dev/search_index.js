var documenterSearchIndex = {"docs":
[{"location":"usage/","page":"Usage","title":"Usage","text":"CurrentModule = Telegram","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Setting-up-telegram-token-and-chat_id","page":"Usage","title":"Setting up telegram token and chat_id","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In all examples of this section, it is assumed for simplicity that you set telegram token and chat_id in TG_TOKEN and TG_CHAT_ID environment variables correspondingly. So you can run your julia session like this for example","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"sh> export TG_TOKEN=123456:ababababababbabababababbababaab\nsh> export TG_CHAT_ID=1234567\nsh> julia","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In order to get token itself, you should follow this instruction. Just talk to BotFather and after few simple questions you will receive the token.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Easiest way to obtain chat_id is through running simple print bot.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\n\ntg = TelegramClient(ENV[\"TG_TOKEN\"])\n\nrun_bot() do msg\n    println(msg)\nend","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"After running this script just open chat with your newly created bot and send it any message. You will receive something like this","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"{\n   \"update_id\": 87654321,\n     \"message\": {\n                   \"message_id\": 6789,\n                         \"from\": {\n                                               \"id\": 123456789,\n                                           \"is_bot\": false,\n                                    \"language_code\": \"en\"\n                                 },\n                         \"chat\": {\n                                            \"id\": 123456789,\n                                          \"type\": \"private\"\n                                 },\n                         \"date\": 1592767594,\n                         \"text\": \"Hello\"\n                }\n}","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In this example, field message.chat.id = 123456789 is necessary chat_id which shoud be stored in TG_CHAT_ID variable.","category":"page"},{"location":"usage/#Initializing-TelegramClient","page":"Usage","title":"Initializing TelegramClient","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To initialize client you need to pass reuired token parameter.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\n\ntg = TelegramClient(ENV[\"TG_TOKEN\"])","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Since Telegram.jl was built with the first-class support of the Telegram as a notification system, you can pass chat_id variable, which will be used then in every function related to messaging","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\n\ntg = TelegramClient(ENV[\"TG_TOKEN\"]; chat_id = ENV[\"TG_CHAT_ID\"])\n\nTelegram.sendMessage(tg, text = \"Hello world\") # will send \"Hello world\" message \n                                               # to chat defined in ENV[\"TG_CHAT_ID\"] variable","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Also, by default new TelegramClient is used globally in all API Reference related functions, so you can run commands like","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\n\ntg = TelegramClient(ENV[\"TG_TOKEN\"]; chat_id = ENV[\"TG_CHAT_ID\"])\nTelegram.sendMessage(text = \"Hello world\")","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"which will send \"Hello world\" message to the chat defined by ENV[\"TG_CHAT_ID\"] variable with the bot defined by ENV[\"TG_TOKEN\"] variable.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In order to override this behaviour you can set use_globally argument of TelegramClient function. To set previously defined client as a global, you should use useglobally!.","category":"page"},{"location":"usage/#Using-Telegram-Bot-API","page":"Usage","title":"Using Telegram Bot API","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Due to the rather large number of functions defined in API Reference, they are hidden behind module declaration, so by default they should be prefixed with Telegram.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\n\nTelegramClient(ENV[\"TG_TOKEN\"])\n\nTelegram.getMe() # returns information about bot","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"If this is inconvenient for some reason, you can either introduce new and short constant name, like this","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\nconst TG = Telegram\n\nTelegramClient(ENV[\"TG_TOKEN\"])\n\nTG.getMe()","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"or you can import all telegram Bot API by using Telegram.API, in this scenario you do not need to use any prefixes","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\nusing Telegram.API\n\nTelegramClient(ENV[\"TG_TOKEN\"])\n\ngetMe()","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In what follows we will use latter approach.","category":"page"},{"location":"usage/#Sending-messages","page":"Usage","title":"Sending messages","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"If you set telegram client globally with chat_id as it is described in previous sections, then you can use message related function from API Reference, omitting chat_id argument. For example, this is how you can use most basic sendMessage function","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram, Telegram.API\n\nTelegramClient(ENV[\"TG_TOKEN\"], chat_id = ENV[\"TG_CHAT_ID\"])\n\nsendMessage(text = \"Hello world\")","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Of course if you have more than one client or writing a bot which should communicate in multiple chats, you can add this parameters to function calls and they will override default values, for example","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram, Telegram.API\n\ntg1 = TelegramClient(ENV[\"TG_TOKEN\"]; chat_id = ENV[\"TG_CHAT_ID\"])\ntg2 = TelegramClient(ENV[\"TG_TOKEN2\"])\n\nsendMessage(tg1, text = \"I am bot number 1\", chat_id = 12345)\nsendMessage(tg2, text = \"I am bot number 2\", chat_id = 54321)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"will send messages from two different telegram bots to two different chats. It is useful for example, when you have telegram bot communicating with users and at the same time error logs of this bot is being sent to another chat by error reporting bot.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In addition to text messages you can also send any sort of IO objects: images, audio, documents and so on. For example to send picture you can do something like this","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram, Telegram.API\n\nTelegramClient(ENV[\"TG_TOKEN\"], chat_id = ENV[\"TG_CHAT_ID\"])\n\nopen(\"picture.jpg\", \"r\") do io\n    sendPhoto(photo = io)\nend\n\n# or if you want it quick and dirty\nsendPhoto(photo = open(\"picture.jpg\", \"r\"))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Data sending is not limited by files only, you can send memory objects as well, in this case you should give them name in the form of Pair","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram, Telegram.API\n\nTelegramClient(ENV[\"TG_TOKEN\"], chat_id = ENV[\"TG_CHAT_ID\"])\n\nio = IOBuffer()\nprint(io, \"Hello world!\")\nsendDocument(document = \"hello.txt\" => io)","category":"page"},{"location":"usage/#Logging","page":"Usage","title":"Logging","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"You can also use Telegram.jl as a logging system, for this you are provided with special TelegramLogger structure. It accepts TelegramClient object which must have initialized chat_id parameter","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\nusing Logging\n\ntg = TelegramClient(ENV[\"TG_TOKEN\"], chat_id = ENV[\"TG_CHAT_ID\"])\ntg_logger = TelegramLogger(tg; async = false)\n\nwith_logger(tg_logger) do\n    @info \"Hello from telegram logger!\"\nend","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"But even better it is used together with LoggingExtras.jl package, which can demux log messages and send critical messages to telegram backend without interrupting normal logging flow","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram\nusing Logging, LoggingExtras\n\ntg = TelegramClient(ENV[\"TG_TOKEN\"], chat_id = ENV[\"TG_CHAT_ID\"])\ntg_logger = TelegramLogger(tg; async = false)\ndemux_logger = TeeLogger(\n    MinLevelLogger(tg_logger, Logging.Error),\n    ConsoleLogger()\n)\nglobal_logger(demux_logger)\n\n@warn \"It is bad\"        # goes to console\n@info \"normal stuff\"     # goes to console\n@error \"THE WORSE THING\" # goes to console and telegram\n@debug \"it is chill\"     # goes to console","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"This way, just by adding few configuration lines, you can have unchanged logging system with telegram instant messaging if anything critically important happened.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Also, take notion of async argument of TelegramLogger. There are two modes of operating, usual and asynchronous. Second is useful if you have long running program and you do not want it to pause and send telegram message, so usual scenario is like this","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"while true\n    try\n        # do some stuff\n    catch err\n        @error err\n        # process error\n    end\nend    ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"But asynchronous mode has it's drawbacks, consider this for example","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"try\n    sqrt(:a)\ncatch err\n    @error err\nend","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"if you run this snippet (with proper logger initialization) from command line, main thread  stops before asynchronous message to telegram is sent. In such cases, it make sense to set async = false","category":"page"},{"location":"usage/#Bots","page":"Usage","title":"Bots","text":"","category":"section"},{"location":"usage/#Echo-bot","page":"Usage","title":"Echo bot","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"With the help of run_bot method it's quite simple to set up simple telegram bots.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram, Telegram.API\n\ntoken = ENV[\"TG_TOKEN\"]\ntg = TelegramClient(token)\n\n# Echo bot\nrun_bot() do msg\n    sendMessage(text = msg.message.text, chat_id = msg.message.chat.id)\nend","category":"page"},{"location":"usage/#Turtle-graphics-bot","page":"Usage","title":"Turtle graphics bot","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In this example we build more advanced bot, which is generating turtle graphics with the help of Luxor.jl package.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"In addition to previous echo bot, this can do the following","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Generate and send images in memory, without storing them in file system\nGenerate virtual keyboard, which can be used by users to make input easier","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using Telegram, Telegram.API\nusing Luxor\n\ntoken = ENV[\"TG_TOKEN\"]\ntg = TelegramClient(token)\n\n\"\"\"\n    draw_turtle(angles::AbstractVector)\n    \nDraw turtle graphics, where turtle is moving in spiral, on each step rotating\non next angle from `angles` vector. Vector `angles` is repeated cyclically.\n\"\"\"\nfunction draw_turtle(angles)\n    d = Drawing(600, 400, :png)\n    origin()\n    background(\"midnightblue\")\n\n    🐢 = Turtle() # you can type the turtle emoji with \\:turtle:\n    Pencolor(🐢, \"cyan\")\n    Penwidth(🐢, 1.5)\n    n = 5.0\n    dn = 1.0/length(angles)*0.7\n    for i in 1:400\n        for angle in angles\n            Forward(🐢, n)\n            Turn(🐢, angle)\n            n += dn\n        end\n        HueShift(🐢)\n    end\n    finish()\n\n    return d\nend\n\n\"\"\"\n    build_keyboard()\n    \nGenerates [telegram keyboard](https://core.telegram.org/bots#keyboards) in the\nform of 3x3 grid of buttons.\n\"\"\"\nfunction build_keyboard()\n    keyboard = Vector{Vector{String}}()\n    for x in 1:3\n        row = String[]\n        for y in 1:3\n            s = join(string.(Int.(round.(rand(rand(1:4)) * 360))), \" \")\n            push!(row, s)\n        end\n        push!(keyboard, row)\n    end\n\n    return Dict(:keyboard => keyboard, :one_time_keyboard => true)\nend\n\nrun_bot() do msg\n    message = get(msg, :message, nothing)\n    message === nothing && return nothing\n    text = get(message, :text, \"\")\n    chat = get(message, :chat, nothing)\n    chat === nothing && return nothing\n    chat_id = get(chat, :id, nothing)\n    chat_id === nothing && return nothing\n    \n    if match(r\"^[0-9 \\.]+$\", text) !== nothing\n        angles = parse.(Float64, split(text, \" \"))\n        turtle = draw_turtle(angles)\n        sendPhoto(photo = \"turtle.png\" => turtle.buffer, reply_markup = build_keyboard(), chat_id = chat_id)\n    else\n        sendMessage(text = \"Unknown command, please provide turtle instructions in the form `angle1 angle2` or use keyboard\", reply_markup = build_keyboard(), chat_id = chat_id, parse_mode = \"MarkdownV2\")\n    end\nend","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"CurrentModule = Telegram","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Word of caution: this documentation is generated automatically from https://core.telegram.org/bots/api and can be incomplete or wrongly formatted. Also this documentation do not contain information about general principles of the Telegram API and response objects. So, if you have any doubts, consult original api documentation and consider it as a ground truth. These docs were generated only for simpler navigation and better help hints in REPL and editors.","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Please notice that this package implements the Bot API. The Telegram Bot API is an API specifically for bots, which is simpler but less customisable. It acts as an intermediary between bots and the Telegram API which allow you to build your own customized Telegram clients.","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"All API functions have TelegramClient as optional positional argument, which means that if it is not set explicitly, than global client is used, which is usually created during initial construction or by explicit call of useglobally! function.","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"All arguments usually have String/Boolean/Integer types which is in one to one correspondence with julian types. Special arguments like document, photo and the like, which are intended for file sending, can accept either IOStream argument as in open(\"picture.png\", \"r\") or Pair{String, IO} in case of in-memory IO objects without names. Read Usage for additional info.","category":"page"},{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#Getting-updates","page":"API Reference","title":"Getting updates","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Telegram.getUpdates\nTelegram.setWebhook\nTelegram.deleteWebhook\nTelegram.getWebhookInfo","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getUpdates","category":"page"},{"location":"reference/#Telegram.API.getUpdates","page":"API Reference","title":"Telegram.API.getUpdates","text":"getUpdates([tg::TelegramClient]; kwargs...)\n\nUse this method to receive incoming updates using long polling (wiki). An Array of Update objects is returned.\n\nOptional arguments\n\noffset: (Integer) Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten.\nlimit: (Integer) Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.\ntimeout: (Integer) Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.\nallowed_updates: (Array of String) A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “editedchannelpost”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.\n\nNotes1. This method will not work if an outgoing webhook is set up.2. In order to avoid getting duplicate updates, recalculate offset after each server response.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setWebhook","category":"page"},{"location":"reference/#Telegram.API.setWebhook","page":"API Reference","title":"Telegram.API.setWebhook","text":"setWebhook([tg::TelegramClient]; kwargs...)\n\nUse this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.\n\nIf you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. https://www.example.com/<token>. Since nobody else knows your bot's token, you can be pretty sure it's us.\n\nRequired arguments\n\nurl: (String) HTTPS url to send updates to. Use an empty string to remove webhook integration\n\nOptional arguments\n\ncertificate: (InputFile) Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details.\nip_address: (String) The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS\nmax_connections: (Integer) Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.\nallowed_updates: (Array of String) A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “editedchannelpost”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.\ndrop_pending_updates: (Boolean) Pass True to drop all pending updates\n\nNotes1. You will not be able to receive updates using getUpdates for as long as an outgoing webhook is set up.2. To use a self-signed certificate, you need to upload your public key certificate using certificate parameter. Please upload as InputFile, sending a String will not work.3. Ports currently supported for Webhooks: 443, 80, 88, 8443.\n\nNEW! If you're having any trouble setting up webhooks, please check out this amazing guide to Webhooks.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deleteWebhook","category":"page"},{"location":"reference/#Telegram.API.deleteWebhook","page":"API Reference","title":"Telegram.API.deleteWebhook","text":"deleteWebhook([tg::TelegramClient]; kwargs...)\n\nUse this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.\n\nOptional arguments\n\ndrop_pending_updates: (Boolean) Pass True to drop all pending updates\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getWebhookInfo","category":"page"},{"location":"reference/#Telegram.API.getWebhookInfo","page":"API Reference","title":"Telegram.API.getWebhookInfo","text":"getWebhookInfo([tg::TelegramClient]; kwargs...)\n\nUse this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/#Available-methods","page":"API Reference","title":"Available methods","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Telegram.getMe\nTelegram.logOut\nTelegram.close\nTelegram.sendMessage\nTelegram.forwardMessage\nTelegram.copyMessage\nTelegram.sendPhoto\nTelegram.sendAudio\nTelegram.sendDocument\nTelegram.sendVideo\nTelegram.sendAnimation\nTelegram.sendVoice\nTelegram.sendVideoNote\nTelegram.sendMediaGroup\nTelegram.sendLocation\nTelegram.editMessageLiveLocation\nTelegram.stopMessageLiveLocation\nTelegram.sendVenue\nTelegram.sendContact\nTelegram.sendPoll\nTelegram.sendDice\nTelegram.sendChatAction\nTelegram.getUserProfilePhotos\nTelegram.getFile\nTelegram.kickChatMember\nTelegram.unbanChatMember\nTelegram.restrictChatMember\nTelegram.promoteChatMember\nTelegram.setChatAdministratorCustomTitle\nTelegram.setChatPermissions\nTelegram.exportChatInviteLink\nTelegram.setChatPhoto\nTelegram.deleteChatPhoto\nTelegram.setChatTitle\nTelegram.setChatDescription\nTelegram.pinChatMessage\nTelegram.unpinChatMessage\nTelegram.unpinAllChatMessages\nTelegram.leaveChat\nTelegram.getChat\nTelegram.getChatAdministrators\nTelegram.getChatMembersCount\nTelegram.getChatMember\nTelegram.setChatStickerSet\nTelegram.deleteChatStickerSet\nTelegram.answerCallbackQuery\nTelegram.setMyCommands\nTelegram.getMyCommands","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getMe","category":"page"},{"location":"reference/#Telegram.API.getMe","page":"API Reference","title":"Telegram.API.getMe","text":"getMe([tg::TelegramClient]; kwargs...)\n\nA simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"logOut","category":"page"},{"location":"reference/#Telegram.API.logOut","page":"API Reference","title":"Telegram.API.logOut","text":"logOut([tg::TelegramClient]; kwargs...)\n\nUse this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"close","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendMessage","category":"page"},{"location":"reference/#Telegram.API.sendMessage","page":"API Reference","title":"Telegram.API.sendMessage","text":"sendMessage([tg::TelegramClient]; kwargs...)\n\nUse this method to send text messages. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\ntext: (String) Text of the message to be sent, 1-4096 characters after entities parsing\n\nOptional arguments\n\nparse_mode: (String) Mode for parsing entities in the message text. See formatting options for more details.\nentities: (Array of MessageEntity) List of special entities that appear in message text, which can be specified instead of parse_mode\ndisable_web_page_preview: (Boolean) Disables link previews for links in this message\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"forwardMessage","category":"page"},{"location":"reference/#Telegram.API.forwardMessage","page":"API Reference","title":"Telegram.API.forwardMessage","text":"forwardMessage([tg::TelegramClient]; kwargs...)\n\nUse this method to forward messages of any kind. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nfrom_chat_id: (Integer or String) Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)\nmessage_id: (Integer) Message identifier in the chat specified in fromchatid\n\nOptional arguments\n\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"copyMessage","category":"page"},{"location":"reference/#Telegram.API.copyMessage","page":"API Reference","title":"Telegram.API.copyMessage","text":"copyMessage([tg::TelegramClient]; kwargs...)\n\nUse this method to copy messages of any kind. The method is analogous to the method forwardMessages, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nfrom_chat_id: (Integer or String) Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)\nmessage_id: (Integer) Message identifier in the chat specified in fromchatid\n\nOptional arguments\n\ncaption: (String) New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept\nparse_mode: (String) Mode for parsing entities in the new caption. See formatting options for more details.\ncaption_entities: (Array of MessageEntity) List of special entities that appear in the new caption, which can be specified instead of parse_mode\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendPhoto","category":"page"},{"location":"reference/#Telegram.API.sendPhoto","page":"API Reference","title":"Telegram.API.sendPhoto","text":"sendPhoto([tg::TelegramClient]; kwargs...)\n\nUse this method to send photos. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nphoto: (InputFile or String) Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. More info on Sending Files »\n\nOptional arguments\n\ncaption: (String) Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing\nparse_mode: (String) Mode for parsing entities in the photo caption. See formatting options for more details.\ncaption_entities: (Array of MessageEntity) List of special entities that appear in the caption, which can be specified instead of parse_mode\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendAudio","category":"page"},{"location":"reference/#Telegram.API.sendAudio","page":"API Reference","title":"Telegram.API.sendAudio","text":"sendAudio([tg::TelegramClient]; kwargs...)\n\nUse this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.\n\nFor sending voice messages, use the sendVoice method instead.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\naudio: (InputFile or String) Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »\n\nOptional arguments\n\ncaption: (String) Audio caption, 0-1024 characters after entities parsing\nparse_mode: (String) Mode for parsing entities in the audio caption. See formatting options for more details.\ncaption_entities: (Array of MessageEntity) List of special entities that appear in the caption, which can be specified instead of parse_mode\nduration: (Integer) Duration of the audio in seconds\nperformer: (String) Performer\ntitle: (String) Track name\nthumb: (InputFile or String) Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<fileattachname>” if the thumbnail was uploaded using multipart/form-data under <fileattachname>. More info on Sending Files »\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendDocument","category":"page"},{"location":"reference/#Telegram.API.sendDocument","page":"API Reference","title":"Telegram.API.sendDocument","text":"sendDocument([tg::TelegramClient]; kwargs...)\n\nUse this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\ndocument: (InputFile or String) File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »\n\nOptional arguments\n\nthumb: (InputFile or String) Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<fileattachname>” if the thumbnail was uploaded using multipart/form-data under <fileattachname>. More info on Sending Files »\ncaption: (String) Document caption (may also be used when resending documents by file_id), 0-1024 characters after entities parsing\nparse_mode: (String) Mode for parsing entities in the document caption. See formatting options for more details.\ncaption_entities: (Array of MessageEntity) List of special entities that appear in the caption, which can be specified instead of parse_mode\ndisable_content_type_detection: (Boolean) Disables automatic server-side content type detection for files uploaded using multipart/form-data\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendVideo","category":"page"},{"location":"reference/#Telegram.API.sendVideo","page":"API Reference","title":"Telegram.API.sendVideo","text":"sendVideo([tg::TelegramClient]; kwargs...)\n\nUse this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nvideo: (InputFile or String) Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More info on Sending Files »\n\nOptional arguments\n\nduration: (Integer) Duration of sent video in seconds\nwidth: (Integer) Video width\nheight: (Integer) Video height\nthumb: (InputFile or String) Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<fileattachname>” if the thumbnail was uploaded using multipart/form-data under <fileattachname>. More info on Sending Files »\ncaption: (String) Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing\nparse_mode: (String) Mode for parsing entities in the video caption. See formatting options for more details.\ncaption_entities: (Array of MessageEntity) List of special entities that appear in the caption, which can be specified instead of parse_mode\nsupports_streaming: (Boolean) Pass True, if the uploaded video is suitable for streaming\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendAnimation","category":"page"},{"location":"reference/#Telegram.API.sendAnimation","page":"API Reference","title":"Telegram.API.sendAnimation","text":"sendAnimation([tg::TelegramClient]; kwargs...)\n\nUse this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nanimation: (InputFile or String) Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More info on Sending Files »\n\nOptional arguments\n\nduration: (Integer) Duration of sent animation in seconds\nwidth: (Integer) Animation width\nheight: (Integer) Animation height\nthumb: (InputFile or String) Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<fileattachname>” if the thumbnail was uploaded using multipart/form-data under <fileattachname>. More info on Sending Files »\ncaption: (String) Animation caption (may also be used when resending animation by file_id), 0-1024 characters after entities parsing\nparse_mode: (String) Mode for parsing entities in the animation caption. See formatting options for more details.\ncaption_entities: (Array of MessageEntity) List of special entities that appear in the caption, which can be specified instead of parse_mode\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendVoice","category":"page"},{"location":"reference/#Telegram.API.sendVoice","page":"API Reference","title":"Telegram.API.sendVoice","text":"sendVoice([tg::TelegramClient]; kwargs...)\n\nUse this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nvoice: (InputFile or String) Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »\n\nOptional arguments\n\ncaption: (String) Voice message caption, 0-1024 characters after entities parsing\nparse_mode: (String) Mode for parsing entities in the voice message caption. See formatting options for more details.\ncaption_entities: (Array of MessageEntity) List of special entities that appear in the caption, which can be specified instead of parse_mode\nduration: (Integer) Duration of the voice message in seconds\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendVideoNote","category":"page"},{"location":"reference/#Telegram.API.sendVideoNote","page":"API Reference","title":"Telegram.API.sendVideoNote","text":"sendVideoNote([tg::TelegramClient]; kwargs...)\n\nAs of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nvideo_note: (InputFile or String) Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More info on Sending Files ». Sending video notes by a URL is currently unsupported\n\nOptional arguments\n\nduration: (Integer) Duration of sent video in seconds\nlength: (Integer) Video width and height, i.e. diameter of the video message\nthumb: (InputFile or String) Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<fileattachname>” if the thumbnail was uploaded using multipart/form-data under <fileattachname>. More info on Sending Files »\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendMediaGroup","category":"page"},{"location":"reference/#Telegram.API.sendMediaGroup","page":"API Reference","title":"Telegram.API.sendMediaGroup","text":"sendMediaGroup([tg::TelegramClient]; kwargs...)\n\nUse this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmedia: (Array of InputMediaAudio, InputMediaDocument, InputMediaPhoto and InputMediaVideo) A JSON-serialized array describing messages to be sent, must include 2-10 items\n\nOptional arguments\n\ndisable_notification: (Boolean) Sends messages silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the messages are a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendLocation","category":"page"},{"location":"reference/#Telegram.API.sendLocation","page":"API Reference","title":"Telegram.API.sendLocation","text":"sendLocation([tg::TelegramClient]; kwargs...)\n\nUse this method to send point on the map. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nlatitude: (Float number) Latitude of the location\nlongitude: (Float number) Longitude of the location\n\nOptional arguments\n\nhorizontal_accuracy: (Float number) The radius of uncertainty for the location, measured in meters; 0-1500\nlive_period: (Integer) Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400.\nheading: (Integer) For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\nproximity_alert_radius: (Integer) For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"editMessageLiveLocation","category":"page"},{"location":"reference/#Telegram.API.editMessageLiveLocation","page":"API Reference","title":"Telegram.API.editMessageLiveLocation","text":"editMessageLiveLocation([tg::TelegramClient]; kwargs...)\n\nUse this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n\nRequired arguments\n\nlatitude: (Float number) Latitude of new location\nlongitude: (Float number) Longitude of new location\n\nOptional arguments\n\nchat_id: (Integer or String) Required if inlinemessageid is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Required if inlinemessageid is not specified. Identifier of the message to edit\ninline_message_id: (String) Required if chatid and messageid are not specified. Identifier of the inline message\nhorizontal_accuracy: (Float number) The radius of uncertainty for the location, measured in meters; 0-1500\nheading: (Integer) Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.\nproximity_alert_radius: (Integer) Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for a new inline keyboard.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"stopMessageLiveLocation","category":"page"},{"location":"reference/#Telegram.API.stopMessageLiveLocation","page":"API Reference","title":"Telegram.API.stopMessageLiveLocation","text":"stopMessageLiveLocation([tg::TelegramClient]; kwargs...)\n\nUse this method to stop updating a live location message before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise True is returned.\n\nOptional arguments\n\nchat_id: (Integer or String) Required if inlinemessageid is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Required if inlinemessageid is not specified. Identifier of the message with live location to stop\ninline_message_id: (String) Required if chatid and messageid are not specified. Identifier of the inline message\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for a new inline keyboard.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendVenue","category":"page"},{"location":"reference/#Telegram.API.sendVenue","page":"API Reference","title":"Telegram.API.sendVenue","text":"sendVenue([tg::TelegramClient]; kwargs...)\n\nUse this method to send information about a venue. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nlatitude: (Float number) Latitude of the venue\nlongitude: (Float number) Longitude of the venue\ntitle: (String) Name of the venue\naddress: (String) Address of the venue\n\nOptional arguments\n\nfoursquare_id: (String) Foursquare identifier of the venue\nfoursquare_type: (String) Foursquare type of the venue, if known. (For example, “artsentertainment/default”, “artsentertainment/aquarium” or “food/icecream”.)\ngoogle_place_id: (String) Google Places identifier of the venue\ngoogle_place_type: (String) Google Places type of the venue. (See supported types.)\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendContact","category":"page"},{"location":"reference/#Telegram.API.sendContact","page":"API Reference","title":"Telegram.API.sendContact","text":"sendContact([tg::TelegramClient]; kwargs...)\n\nUse this method to send phone contacts. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nphone_number: (String) Contact's phone number\nfirst_name: (String) Contact's first name\n\nOptional arguments\n\nlast_name: (String) Contact's last name\nvcard: (String) Additional data about the contact in the form of a vCard, 0-2048 bytes\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendPoll","category":"page"},{"location":"reference/#Telegram.API.sendPoll","page":"API Reference","title":"Telegram.API.sendPoll","text":"sendPoll([tg::TelegramClient]; kwargs...)\n\nUse this method to send a native poll. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nquestion: (String) Poll question, 1-300 characters\noptions: (Array of String) A JSON-serialized list of answer options, 2-10 strings 1-100 characters each\n\nOptional arguments\n\nis_anonymous: (Boolean) True, if the poll needs to be anonymous, defaults to True\ntype: (String) Poll type, “quiz” or “regular”, defaults to “regular”\nallows_multiple_answers: (Boolean) True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False\ncorrect_option_id: (Integer) 0-based identifier of the correct answer option, required for polls in quiz mode\nexplanation: (String) Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing\nexplanation_parse_mode: (String) Mode for parsing entities in the explanation. See formatting options for more details.\nexplanation_entities: (Array of MessageEntity) List of special entities that appear in the poll explanation, which can be specified instead of parse_mode\nopen_period: (Integer) Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.\nclose_date: (Integer) Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period.\nis_closed: (Boolean) Pass True, if the poll needs to be immediately closed. This can be useful for poll preview.\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendDice","category":"page"},{"location":"reference/#Telegram.API.sendDice","page":"API Reference","title":"Telegram.API.sendDice","text":"sendDice([tg::TelegramClient]; kwargs...)\n\nUse this method to send an animated emoji that will display a random value. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n\nOptional arguments\n\nemoji: (String) Emoji on which the dice throw animation is based. Currently, must be one of “”, “”, “”, “”, or “”. Dice can have values 1-6 for “” and “”, values 1-5 for “” and “”, and values 1-64 for “”. Defaults to “”\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendChatAction","category":"page"},{"location":"reference/#Telegram.API.sendChatAction","page":"API Reference","title":"Telegram.API.sendChatAction","text":"sendChatAction([tg::TelegramClient]; kwargs...)\n\nUse this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.\n\nExample: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use sendChatAction with action = upload_photo. The user will see a “sending photo” status for the bot.\n\nWe only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\naction: (String) Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, uploadphoto for photos, recordvideo or uploadvideo for videos, recordaudio or uploadaudio for audio files, uploaddocument for general files, findlocation for location data, recordvideonote or uploadvideo_note for video notes.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getUserProfilePhotos","category":"page"},{"location":"reference/#Telegram.API.getUserProfilePhotos","page":"API Reference","title":"Telegram.API.getUserProfilePhotos","text":"getUserProfilePhotos([tg::TelegramClient]; kwargs...)\n\nUse this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.\n\nRequired arguments\n\nuser_id: (Integer) Unique identifier of the target user\n\nOptional arguments\n\noffset: (Integer) Sequential number of the first photo to be returned. By default, all photos are returned.\nlimit: (Integer) Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getFile","category":"page"},{"location":"reference/#Telegram.API.getFile","page":"API Reference","title":"Telegram.API.getFile","text":"getFile([tg::TelegramClient]; kwargs...)\n\nUse this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.\n\nRequired arguments\n\nfile_id: (String) File identifier to get info about\n\nNote: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"kickChatMember","category":"page"},{"location":"reference/#Telegram.API.kickChatMember","page":"API Reference","title":"Telegram.API.kickChatMember","text":"kickChatMember([tg::TelegramClient]; kwargs...)\n\nUse this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)\nuser_id: (Integer) Unique identifier of the target user\n\nOptional arguments\n\nuntil_date: (Integer) Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"unbanChatMember","category":"page"},{"location":"reference/#Telegram.API.unbanChatMember","page":"API Reference","title":"Telegram.API.unbanChatMember","text":"unbanChatMember([tg::TelegramClient]; kwargs...)\n\nUse this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter onlyifbanned. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target group or username of the target supergroup or channel (in the format @username)\nuser_id: (Integer) Unique identifier of the target user\n\nOptional arguments\n\nonly_if_banned: (Boolean) Do nothing if the user is not banned\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"restrictChatMember","category":"page"},{"location":"reference/#Telegram.API.restrictChatMember","page":"API Reference","title":"Telegram.API.restrictChatMember","text":"restrictChatMember([tg::TelegramClient]; kwargs...)\n\nUse this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\nuser_id: (Integer) Unique identifier of the target user\npermissions: (ChatPermissions) A JSON-serialized object for new user permissions\n\nOptional arguments\n\nuntil_date: (Integer) Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"promoteChatMember","category":"page"},{"location":"reference/#Telegram.API.promoteChatMember","page":"API Reference","title":"Telegram.API.promoteChatMember","text":"promoteChatMember([tg::TelegramClient]; kwargs...)\n\nUse this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nuser_id: (Integer) Unique identifier of the target user\n\nOptional arguments\n\nis_anonymous: (Boolean) Pass True, if the administrator's presence in the chat is hidden\ncan_change_info: (Boolean) Pass True, if the administrator can change chat title, photo and other settings\ncan_post_messages: (Boolean) Pass True, if the administrator can create channel posts, channels only\ncan_edit_messages: (Boolean) Pass True, if the administrator can edit messages of other users and can pin messages, channels only\ncan_delete_messages: (Boolean) Pass True, if the administrator can delete messages of other users\ncan_invite_users: (Boolean) Pass True, if the administrator can invite new users to the chat\ncan_restrict_members: (Boolean) Pass True, if the administrator can restrict, ban or unban chat members\ncan_pin_messages: (Boolean) Pass True, if the administrator can pin messages, supergroups only\ncan_promote_members: (Boolean) Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setChatAdministratorCustomTitle","category":"page"},{"location":"reference/#Telegram.API.setChatAdministratorCustomTitle","page":"API Reference","title":"Telegram.API.setChatAdministratorCustomTitle","text":"setChatAdministratorCustomTitle([tg::TelegramClient]; kwargs...)\n\nUse this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\nuser_id: (Integer) Unique identifier of the target user\ncustom_title: (String) New custom title for the administrator; 0-16 characters, emoji are not allowed\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setChatPermissions","category":"page"},{"location":"reference/#Telegram.API.setChatPermissions","page":"API Reference","title":"Telegram.API.setChatPermissions","text":"setChatPermissions([tg::TelegramClient]; kwargs...)\n\nUse this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the canrestrictmembers admin rights. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\npermissions: (ChatPermissions) New default chat permissions\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"exportChatInviteLink","category":"page"},{"location":"reference/#Telegram.API.exportChatInviteLink","page":"API Reference","title":"Telegram.API.exportChatInviteLink","text":"exportChatInviteLink([tg::TelegramClient]; kwargs...)\n\nUse this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n\nNote: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using exportChatInviteLink — after this the link will become available to the bot via the getChat method. If your bot needs to generate a new invite link replacing its previous one, use exportChatInviteLink again.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setChatPhoto","category":"page"},{"location":"reference/#Telegram.API.setChatPhoto","page":"API Reference","title":"Telegram.API.setChatPhoto","text":"setChatPhoto([tg::TelegramClient]; kwargs...)\n\nUse this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nphoto: (InputFile) New chat photo, uploaded using multipart/form-data\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deleteChatPhoto","category":"page"},{"location":"reference/#Telegram.API.deleteChatPhoto","page":"API Reference","title":"Telegram.API.deleteChatPhoto","text":"deleteChatPhoto([tg::TelegramClient]; kwargs...)\n\nUse this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setChatTitle","category":"page"},{"location":"reference/#Telegram.API.setChatTitle","page":"API Reference","title":"Telegram.API.setChatTitle","text":"setChatTitle([tg::TelegramClient]; kwargs...)\n\nUse this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\ntitle: (String) New chat title, 1-255 characters\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setChatDescription","category":"page"},{"location":"reference/#Telegram.API.setChatDescription","page":"API Reference","title":"Telegram.API.setChatDescription","text":"setChatDescription([tg::TelegramClient]; kwargs...)\n\nUse this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n\nOptional arguments\n\ndescription: (String) New chat description, 0-255 characters\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"pinChatMessage","category":"page"},{"location":"reference/#Telegram.API.pinChatMessage","page":"API Reference","title":"Telegram.API.pinChatMessage","text":"pinChatMessage([tg::TelegramClient]; kwargs...)\n\nUse this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'canpinmessages' admin right in a supergroup or 'caneditmessages' admin right in a channel. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Identifier of a message to pin\n\nOptional arguments\n\ndisable_notification: (Boolean) Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"unpinChatMessage","category":"page"},{"location":"reference/#Telegram.API.unpinChatMessage","page":"API Reference","title":"Telegram.API.unpinChatMessage","text":"unpinChatMessage([tg::TelegramClient]; kwargs...)\n\nUse this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'canpinmessages' admin right in a supergroup or 'caneditmessages' admin right in a channel. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n\nOptional arguments\n\nmessage_id: (Integer) Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"unpinAllChatMessages","category":"page"},{"location":"reference/#Telegram.API.unpinAllChatMessages","page":"API Reference","title":"Telegram.API.unpinAllChatMessages","text":"unpinAllChatMessages([tg::TelegramClient]; kwargs...)\n\nUse this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'canpinmessages' admin right in a supergroup or 'caneditmessages' admin right in a channel. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"leaveChat","category":"page"},{"location":"reference/#Telegram.API.leaveChat","page":"API Reference","title":"Telegram.API.leaveChat","text":"leaveChat([tg::TelegramClient]; kwargs...)\n\nUse this method for your bot to leave a group, supergroup or channel. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getChat","category":"page"},{"location":"reference/#Telegram.API.getChat","page":"API Reference","title":"Telegram.API.getChat","text":"getChat([tg::TelegramClient]; kwargs...)\n\nUse this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getChatAdministrators","category":"page"},{"location":"reference/#Telegram.API.getChatAdministrators","page":"API Reference","title":"Telegram.API.getChatAdministrators","text":"getChatAdministrators([tg::TelegramClient]; kwargs...)\n\nUse this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getChatMembersCount","category":"page"},{"location":"reference/#Telegram.API.getChatMembersCount","page":"API Reference","title":"Telegram.API.getChatMembersCount","text":"getChatMembersCount([tg::TelegramClient]; kwargs...)\n\nUse this method to get the number of members in a chat. Returns Int on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getChatMember","category":"page"},{"location":"reference/#Telegram.API.getChatMember","page":"API Reference","title":"Telegram.API.getChatMember","text":"getChatMember([tg::TelegramClient]; kwargs...)\n\nUse this method to get information about a member of a chat. Returns a ChatMember object on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)\nuser_id: (Integer) Unique identifier of the target user\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setChatStickerSet","category":"page"},{"location":"reference/#Telegram.API.setChatStickerSet","page":"API Reference","title":"Telegram.API.setChatStickerSet","text":"setChatStickerSet([tg::TelegramClient]; kwargs...)\n\nUse this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field cansetsticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\nsticker_set_name: (String) Name of the sticker set to be set as the group sticker set\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deleteChatStickerSet","category":"page"},{"location":"reference/#Telegram.API.deleteChatStickerSet","page":"API Reference","title":"Telegram.API.deleteChatStickerSet","text":"deleteChatStickerSet([tg::TelegramClient]; kwargs...)\n\nUse this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field cansetsticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"answerCallbackQuery","category":"page"},{"location":"reference/#Telegram.API.answerCallbackQuery","page":"API Reference","title":"Telegram.API.answerCallbackQuery","text":"answerCallbackQuery([tg::TelegramClient]; kwargs...)\n\nUse this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.\n\nAlternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via @Botfather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.\n\nRequired arguments\n\ncallback_query_id: (String) Unique identifier for the query to be answered\n\nOptional arguments\n\ntext: (String) Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters\nshow_alert: (Boolean) If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.\nurl: (String) URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @Botfather, specify the URL that opens your game — note that this will only work if the query comes from a callback_game button.Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.\ncache_time: (Integer) The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setMyCommands","category":"page"},{"location":"reference/#Telegram.API.setMyCommands","page":"API Reference","title":"Telegram.API.setMyCommands","text":"setMyCommands([tg::TelegramClient]; kwargs...)\n\nUse this method to change the list of the bot's commands. Returns True on success.\n\nRequired arguments\n\ncommands: (Array of BotCommand) A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getMyCommands","category":"page"},{"location":"reference/#Telegram.API.getMyCommands","page":"API Reference","title":"Telegram.API.getMyCommands","text":"getMyCommands([tg::TelegramClient]; kwargs...)\n\nUse this method to get the current list of the bot's commands. Requires no parameters. Returns Array of BotCommand on success.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/#Updating-messages","page":"API Reference","title":"Updating messages","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Telegram.editMessageText\nTelegram.editMessageCaption\nTelegram.editMessageMedia\nTelegram.editMessageReplyMarkup\nTelegram.stopPoll\nTelegram.deleteMessage","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"editMessageText","category":"page"},{"location":"reference/#Telegram.API.editMessageText","page":"API Reference","title":"Telegram.API.editMessageText","text":"editMessageText([tg::TelegramClient]; kwargs...)\n\nUse this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n\nRequired arguments\n\ntext: (String) New text of the message, 1-4096 characters after entities parsing\n\nOptional arguments\n\nchat_id: (Integer or String) Required if inlinemessageid is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Required if inlinemessageid is not specified. Identifier of the message to edit\ninline_message_id: (String) Required if chatid and messageid are not specified. Identifier of the inline message\nparse_mode: (String) Mode for parsing entities in the message text. See formatting options for more details.\nentities: (Array of MessageEntity) List of special entities that appear in message text, which can be specified instead of parse_mode\ndisable_web_page_preview: (Boolean) Disables link previews for links in this message\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for an inline keyboard.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"editMessageCaption","category":"page"},{"location":"reference/#Telegram.API.editMessageCaption","page":"API Reference","title":"Telegram.API.editMessageCaption","text":"editMessageCaption([tg::TelegramClient]; kwargs...)\n\nUse this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n\nOptional arguments\n\nchat_id: (Integer or String) Required if inlinemessageid is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Required if inlinemessageid is not specified. Identifier of the message to edit\ninline_message_id: (String) Required if chatid and messageid are not specified. Identifier of the inline message\ncaption: (String) New caption of the message, 0-1024 characters after entities parsing\nparse_mode: (String) Mode for parsing entities in the message caption. See formatting options for more details.\ncaption_entities: (Array of MessageEntity) List of special entities that appear in the caption, which can be specified instead of parse_mode\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for an inline keyboard.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"editMessageMedia","category":"page"},{"location":"reference/#Telegram.API.editMessageMedia","page":"API Reference","title":"Telegram.API.editMessageMedia","text":"editMessageMedia([tg::TelegramClient]; kwargs...)\n\nUse this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file_id or specify a URL. On success, if the edited message was sent by the bot, the edited Message is returned, otherwise True is returned.\n\nRequired arguments\n\nmedia: (InputMedia) A JSON-serialized object for a new media content of the message\n\nOptional arguments\n\nchat_id: (Integer or String) Required if inlinemessageid is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Required if inlinemessageid is not specified. Identifier of the message to edit\ninline_message_id: (String) Required if chatid and messageid are not specified. Identifier of the inline message\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for a new inline keyboard.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"editMessageReplyMarkup","category":"page"},{"location":"reference/#Telegram.API.editMessageReplyMarkup","page":"API Reference","title":"Telegram.API.editMessageReplyMarkup","text":"editMessageReplyMarkup([tg::TelegramClient]; kwargs...)\n\nUse this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\n\nOptional arguments\n\nchat_id: (Integer or String) Required if inlinemessageid is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Required if inlinemessageid is not specified. Identifier of the message to edit\ninline_message_id: (String) Required if chatid and messageid are not specified. Identifier of the inline message\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for an inline keyboard.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"stopPoll","category":"page"},{"location":"reference/#Telegram.API.stopPoll","page":"API Reference","title":"Telegram.API.stopPoll","text":"stopPoll([tg::TelegramClient]; kwargs...)\n\nUse this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Identifier of the original message with the poll\n\nOptional arguments\n\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for a new message inline keyboard.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deleteMessage","category":"page"},{"location":"reference/#Telegram.API.deleteMessage","page":"API Reference","title":"Telegram.API.deleteMessage","text":"deleteMessage([tg::TelegramClient]; kwargs...)\n\nUse this method to delete a message, including service messages, with the following limitations:- A message can only be deleted if it was sent less than 48 hours ago.- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.- Bots can delete outgoing messages in private chats, groups, and supergroups.- Bots can delete incoming messages in private chats.- Bots granted canpostmessages permissions can delete outgoing messages in channels.- If the bot is an administrator of a group, it can delete any message there.- If the bot has candeletemessages permission in a supergroup or a channel, it can delete any message there.Returns True on success.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nmessage_id: (Integer) Identifier of the message to delete\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/#Stickers","page":"API Reference","title":"Stickers","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Telegram.sendSticker\nTelegram.getStickerSet\nTelegram.uploadStickerFile\nTelegram.createNewStickerSet\nTelegram.addStickerToSet\nTelegram.setStickerPositionInSet\nTelegram.deleteStickerFromSet\nTelegram.setStickerSetThumb","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendSticker","category":"page"},{"location":"reference/#Telegram.API.sendSticker","page":"API Reference","title":"Telegram.API.sendSticker","text":"sendSticker([tg::TelegramClient]; kwargs...)\n\nUse this method to send static .WEBP or animated .TGS stickers. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer or String) Unique identifier for the target chat or username of the target channel (in the format @channelusername)\nsticker: (InputFile or String) Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »\n\nOptional arguments\n\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getStickerSet","category":"page"},{"location":"reference/#Telegram.API.getStickerSet","page":"API Reference","title":"Telegram.API.getStickerSet","text":"getStickerSet([tg::TelegramClient]; kwargs...)\n\nUse this method to get a sticker set. On success, a StickerSet object is returned.\n\nRequired arguments\n\nname: (String) Name of the sticker set\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"uploadStickerFile","category":"page"},{"location":"reference/#Telegram.API.uploadStickerFile","page":"API Reference","title":"Telegram.API.uploadStickerFile","text":"uploadStickerFile([tg::TelegramClient]; kwargs...)\n\nUse this method to upload a .PNG file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times). Returns the uploaded File on success.\n\nRequired arguments\n\nuser_id: (Integer) User identifier of sticker file owner\npng_sticker: (InputFile) PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. More info on Sending Files »\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"createNewStickerSet","category":"page"},{"location":"reference/#Telegram.API.createNewStickerSet","page":"API Reference","title":"Telegram.API.createNewStickerSet","text":"createNewStickerSet([tg::TelegramClient]; kwargs...)\n\nUse this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You must use exactly one of the fields pngsticker or tgssticker. Returns True on success.\n\nRequired arguments\n\nuser_id: (Integer) User identifier of created sticker set owner\nname: (String) Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in “by<bot username>”. <bot_username> is case insensitive. 1-64 characters.\ntitle: (String) Sticker set title, 1-64 characters\nemojis: (String) One or more emoji corresponding to the sticker\n\nOptional arguments\n\npng_sticker: (InputFile or String) PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »\ntgs_sticker: (InputFile) TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements\ncontains_masks: (Boolean) Pass True, if a set of mask stickers should be created\nmask_position: (MaskPosition) A JSON-serialized object for position where the mask should be placed on faces\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"addStickerToSet","category":"page"},{"location":"reference/#Telegram.API.addStickerToSet","page":"API Reference","title":"Telegram.API.addStickerToSet","text":"addStickerToSet([tg::TelegramClient]; kwargs...)\n\nUse this method to add a new sticker to a set created by the bot. You must use exactly one of the fields pngsticker or tgssticker. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns True on success.\n\nRequired arguments\n\nuser_id: (Integer) User identifier of sticker set owner\nname: (String) Sticker set name\nemojis: (String) One or more emoji corresponding to the sticker\n\nOptional arguments\n\npng_sticker: (InputFile or String) PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »\ntgs_sticker: (InputFile) TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements\nmask_position: (MaskPosition) A JSON-serialized object for position where the mask should be placed on faces\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setStickerPositionInSet","category":"page"},{"location":"reference/#Telegram.API.setStickerPositionInSet","page":"API Reference","title":"Telegram.API.setStickerPositionInSet","text":"setStickerPositionInSet([tg::TelegramClient]; kwargs...)\n\nUse this method to move a sticker in a set created by the bot to a specific position. Returns True on success.\n\nRequired arguments\n\nsticker: (String) File identifier of the sticker\nposition: (Integer) New sticker position in the set, zero-based\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"deleteStickerFromSet","category":"page"},{"location":"reference/#Telegram.API.deleteStickerFromSet","page":"API Reference","title":"Telegram.API.deleteStickerFromSet","text":"deleteStickerFromSet([tg::TelegramClient]; kwargs...)\n\nUse this method to delete a sticker from a set created by the bot. Returns True on success.\n\nRequired arguments\n\nsticker: (String) File identifier of the sticker\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setStickerSetThumb","category":"page"},{"location":"reference/#Telegram.API.setStickerSetThumb","page":"API Reference","title":"Telegram.API.setStickerSetThumb","text":"setStickerSetThumb([tg::TelegramClient]; kwargs...)\n\nUse this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns True on success.\n\nRequired arguments\n\nname: (String) Sticker set name\nuser_id: (Integer) User identifier of the sticker set owner\n\nOptional arguments\n\nthumb: (InputFile or String) A PNG image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a TGS animation with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/animatedstickers#technical-requirements for animated sticker technical requirements. Pass a fileid as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files ». Animated sticker set thumbnail can't be uploaded via HTTP URL.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/#Inline-mode","page":"API Reference","title":"Inline mode","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Telegram.answerInlineQuery","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"answerInlineQuery","category":"page"},{"location":"reference/#Telegram.API.answerInlineQuery","page":"API Reference","title":"Telegram.API.answerInlineQuery","text":"answerInlineQuery([tg::TelegramClient]; kwargs...)\n\nUse this method to send answers to an inline query. On success, True is returned.No more than 50 results per query are allowed.\n\nRequired arguments\n\ninline_query_id: (String) Unique identifier for the answered query\nresults: (Array of InlineQueryResult) A JSON-serialized array of results for the inline query\n\nOptional arguments\n\ncache_time: (Integer) The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.\nis_personal: (Boolean) Pass True, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query\nnext_offset: (String) Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.\nswitch_pm_text: (String) If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter switchpmparameter\nswitch_pm_parameter: (String) Deep-linking parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/#Payments","page":"API Reference","title":"Payments","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Telegram.sendInvoice\nTelegram.answerShippingQuery\nTelegram.answerPreCheckoutQuery","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendInvoice","category":"page"},{"location":"reference/#Telegram.API.sendInvoice","page":"API Reference","title":"Telegram.API.sendInvoice","text":"sendInvoice([tg::TelegramClient]; kwargs...)\n\nUse this method to send invoices. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer) Unique identifier for the target private chat\ntitle: (String) Product name, 1-32 characters\ndescription: (String) Product description, 1-255 characters\npayload: (String) Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\nprovider_token: (String) Payments provider token, obtained via Botfather\nstart_parameter: (String) Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter\ncurrency: (String) Three-letter ISO 4217 currency code, see more on currencies\nprices: (Array of LabeledPrice) Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)\n\nOptional arguments\n\nprovider_data: (String) A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.\nphoto_url: (String) URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.\nphoto_size: (Integer) Photo size\nphoto_width: (Integer) Photo width\nphoto_height: (Integer) Photo height\nneed_name: (Boolean) Pass True, if you require the user's full name to complete the order\nneed_phone_number: (Boolean) Pass True, if you require the user's phone number to complete the order\nneed_email: (Boolean) Pass True, if you require the user's email address to complete the order\nneed_shipping_address: (Boolean) Pass True, if you require the user's shipping address to complete the order\nsend_phone_number_to_provider: (Boolean) Pass True, if user's phone number should be sent to provider\nsend_email_to_provider: (Boolean) Pass True, if user's email address should be sent to provider\nis_flexible: (Boolean) Pass True, if the final price depends on the shipping method\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"answerShippingQuery","category":"page"},{"location":"reference/#Telegram.API.answerShippingQuery","page":"API Reference","title":"Telegram.API.answerShippingQuery","text":"answerShippingQuery([tg::TelegramClient]; kwargs...)\n\nIf you sent an invoice requesting a shipping address and the parameter isflexible was specified, the Bot API will send an Update with a shippingquery field to the bot. Use this method to reply to shipping queries. On success, True is returned.\n\nRequired arguments\n\nshipping_query_id: (String) Unique identifier for the query to be answered\nok: (Boolean) Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)\n\nOptional arguments\n\nshipping_options: (Array of ShippingOption) Required if ok is True. A JSON-serialized array of available shipping options.\nerror_message: (String) Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"answerPreCheckoutQuery","category":"page"},{"location":"reference/#Telegram.API.answerPreCheckoutQuery","page":"API Reference","title":"Telegram.API.answerPreCheckoutQuery","text":"answerPreCheckoutQuery([tg::TelegramClient]; kwargs...)\n\nOnce the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field precheckoutquery. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n\nRequired arguments\n\npre_checkout_query_id: (String) Unique identifier for the query to be answered\nok: (Boolean) Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.\n\nOptional arguments\n\nerror_message: (String) Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/#Telegram-Passport","page":"API Reference","title":"Telegram Passport","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Telegram.setPassportDataErrors","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setPassportDataErrors","category":"page"},{"location":"reference/#Telegram.API.setPassportDataErrors","page":"API Reference","title":"Telegram.API.setPassportDataErrors","text":"setPassportDataErrors([tg::TelegramClient]; kwargs...)\n\nInforms a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.\n\nUse this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.\n\nRequired arguments\n\nuser_id: (Integer) User identifier\nerrors: (Array of PassportElementError) A JSON-serialized array describing the errors\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/#Games","page":"API Reference","title":"Games","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Telegram.sendGame\nTelegram.setGameScore\nTelegram.getGameHighScores","category":"page"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"sendGame","category":"page"},{"location":"reference/#Telegram.API.sendGame","page":"API Reference","title":"Telegram.API.sendGame","text":"sendGame([tg::TelegramClient]; kwargs...)\n\nUse this method to send a game. On success, the sent Message is returned.\n\nRequired arguments\n\nchat_id: (Integer) Unique identifier for the target chat\ngame_short_name: (String) Short name of the game, serves as the unique identifier for the game. Set up your games via Botfather.\n\nOptional arguments\n\ndisable_notification: (Boolean) Sends the message silently. Users will receive a notification with no sound.\nreply_to_message_id: (Integer) If the message is a reply, ID of the original message\nallow_sending_without_reply: (Boolean) Pass True, if the message should be sent even if the specified replied-to message is not found\nreply_markup: (InlineKeyboardMarkup) A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"setGameScore","category":"page"},{"location":"reference/#Telegram.API.setGameScore","page":"API Reference","title":"Telegram.API.setGameScore","text":"setGameScore([tg::TelegramClient]; kwargs...)\n\nUse this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns True. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.\n\nRequired arguments\n\nuser_id: (Integer) User identifier\nscore: (Integer) New score, must be non-negative\n\nOptional arguments\n\nforce: (Boolean) Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters\ndisable_edit_message: (Boolean) Pass True, if the game message should not be automatically edited to include the current scoreboard\nchat_id: (Integer) Required if inlinemessageid is not specified. Unique identifier for the target chat\nmessage_id: (Integer) Required if inlinemessageid is not specified. Identifier of the sent message\ninline_message_id: (String) Required if chatid and messageid are not specified. Identifier of the inline message\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"getGameHighScores","category":"page"},{"location":"reference/#Telegram.API.getGameHighScores","page":"API Reference","title":"Telegram.API.getGameHighScores","text":"getGameHighScores([tg::TelegramClient]; kwargs...)\n\nUse this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an Array of GameHighScore objects.\n\nThis method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.\n\nRequired arguments\n\nuser_id: (Integer) Target user id\n\nOptional arguments\n\nchat_id: (Integer) Required if inlinemessageid is not specified. Unique identifier for the target chat\nmessage_id: (Integer) Required if inlinemessageid is not specified. Identifier of the sent message\ninline_message_id: (String) Required if chatid and messageid are not specified. Identifier of the inline message\n\nFunction documentation source\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Telegram","category":"page"},{"location":"#Telegram","page":"Home","title":"Telegram","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple Telegram Messaging SDK with logging and bot facilities. Package was built with first-class support of telegram as instant message backend for various notification and reporing systems. So, simpliest way to use this package is by doing something like this","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Telegram, Telegram.API\ntg = TelegramClient(\"YOUR TOKEN\", chat_id = \"YOUR CHAT_ID\")\n\n# Some lengthy calculation\n# ...\n\nsendMessage(text  = \"Calculation complete, result is $result\")","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Package is registered so you can install it in a usual way","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"Telegram\")","category":"page"},{"location":"#General-methods","page":"Home","title":"General methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In addition to API Reference methods, there is a number of methods which add some julian functionality like bots and logging facilities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Telegram]","category":"page"},{"location":"#Telegram.TelegramClient-Tuple{Any}","page":"Home","title":"Telegram.TelegramClient","text":"TelegramClient(token; chat_id, parse_mode, ep, use_globally = true)\n\nCreates telegram client, which can be used to run telegram commands.\n\nArguments\n\ntoken::String: telegram token, which can be obtained in telegram from @BotFather.\nchat_id: if set, used as default chat_id argument for all chat related commands. To get specific chat_id, send message to the bot in telegram application and use getUpdates command.\nparse_mode: if set, used as default for text messaging commands.\nuse_globally::Bool: default true. If set to true then it current client can be used as default in all telegram commands.\nep: endpoint for telegram api. By default https://api.telegram.org/bot is used, but you may change it, if you are using proxy or for testing purposes. \n\n\n\n\n\n","category":"method"},{"location":"#Telegram.TelegramLogger-Tuple{TelegramClient}","page":"Home","title":"Telegram.TelegramLogger","text":"TelegramLogger(tg::TelegramClient; fmt = tg_formatter,\n               min_level = Logging.Info, async = true)\n\nCreates logger, which output log messages to Telegram channel.\n\nArguments\n\ntg: telegram client, should have valid chat_id which will be used for outcome messages. \nfmt: function which accepts (level, _module, group, id, file, line) arguments and outputs message prefix. More details can be found in Logging module. By default each messages is prepended with uppercase level, e.g. \"INFO: \" and the like.\nmin_level: minimum level of log messages which is going to be processed.\nasync: send messages in sync or async mode. Since telegram messages can take some time to be send, it make sense to set this parameter to true, so messages is send in the background with little impact on main program. But since in one run scripts main julia process can be finished before async message is sent, it make sense to set this parameter to false\n\n\n\n\n\n","category":"method"},{"location":"#Telegram.apiquery","page":"Home","title":"Telegram.apiquery","text":"apiquery(method, client; kwargs...)\n\nSends method request to the telegram. It is recommended to use only if some of Telegram API function is not wrapped already.\n\nArguments\n\nmethod::String: method name from the Telegram API, for example \"getMe\"\nclient::TelegramClient: telegram client, can be omitted, in this case default client is used.\n\n\n\n\n\n","category":"function"},{"location":"#Telegram.run_bot","page":"Home","title":"Telegram.run_bot","text":"run_bot(f::Function, [tg::TelegramClient]; timeout = 10, brute_force_alive = false, offset = -1)\n\nRun telegram bot, which executes function f repeatedly.\n\nArguments\n\nf: function to run with the bot. As an input it receive Message in the form of JSON3 object.\ntg: Telegram client, if not set then global telegram client is used.\ntimeout: timeout limit of messages, defines when longpoll messages should be interrupted\nbrute_force_alive: despite all measures, messages sometimes \"hangs\". You may use this argument to wake up telegram server regularly. When this option is set to true it works, but it is not recommended, since it makes additional calls. Consider this feature experimental and use at your own risk.\noffset: telegram message offset, useful if you have processed messages, but bot was interrupted and messages state was lost.\n\n\n\n\n\n","category":"function"},{"location":"#Telegram.useglobally!-Tuple{TelegramClient}","page":"Home","title":"Telegram.useglobally!","text":"useglobally!(tg::TelegramClient)\n\nSet tg as default client in all Telegram.API functions. \n\nExample\n\ntg = TelegramClient(ENV[\"TG_TOKEN\"])\nuseglobally!(tg)\n\ngetMe() # new client is used in this command by default.\n\n\n\n\n\n","category":"method"},{"location":"developers/#Developer-guide","page":"Developer guide","title":"Developer guide","text":"","category":"section"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"Please note, that bot api functions themselves are not written manually, but automatically generated by parsing https://core.telegram.org/bots/api site. So, if you find any inconsistences, missing docstrings or missing methods please do not make changes to src/telegram_api.jl or reference.md. Instead you should change scraping script accordingly. This script can be found in extras directory and in order to build new docs and methods you should do the following","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"sh> cd extras\nsh> julia\njulia> ]\npkg> activate .\n(extras)> instantiate","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"After that you can exit julia session and run","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"sh> julia --project=. make.jl","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"command. It will create two files:","category":"page"},{"location":"developers/","page":"Developer guide","title":"Developer guide","text":"src/telegram_api.jl which contains all methods names and corresponding docstrings\ndocs/src/reference.md which contains complete API Reference page.","category":"page"}]
}
